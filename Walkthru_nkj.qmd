---
title: "Open Matrices Stimuli Set: Getting Started"
execute:
  echo: true # for code folding
  output: false # we don't wanna see all the stuff
format:
  html:
    code-fold: true
jupyter: python3
author:
  - name: Nicholas Judd
    orcid: 0000-0002-0196-9871
    degrees: PhD
  - name: Aran van Hout
    degrees: MSc

#### need to render in the terminal while in the OMSS conda env


# this is not working I think it is a weird mac issue
# jupyter:
#  kernelspec:
#    name: "conda-env-OMSS-py"
#    language: "python"
#    display_name: "OMSS"

    # https://thedatasavvycorner.com/blogs/08-quarto-conda-env
    # follow that to manage your envs
    # we will redo this with pip when we have this packaged
---



First we need to load packages and scripts, make sure to install numpy and opencv.

```{python}
from rules import Ruletype, AttributeType, Rule
from matrix import create_matrix
import cv2
```



### To do for the walkthru
- make a super basic full constant shape
- make a constant shape
- set a seed & explain problem answer seeds
- explain the rules
- explain small & large entities


```{python}

# Define rules for each entity
rules = {
    'BigShape': [
        Rule(Ruletype.FULL_CONSTANT, AttributeType.SHAPE, value = 'square'),
        Rule(Ruletype.CONSTANT, AttributeType.ANGLE),
        Rule(Ruletype.CONSTANT, AttributeType.COLOR),
        Rule(Ruletype.ARITHMETIC, AttributeType.NUMBER),
        Rule(Ruletype.FULL_CONSTANT, AttributeType.SIZE, value = 'medium')],
        
    
       'Line': [
           Rule(Ruletype.CONSTANT, AttributeType.ANGLE, value = 'ONE_EIGHTY'),
           Rule(Ruletype.ARITHMETIC, AttributeType.LINENUMBER),
           Rule(Ruletype.CONSTANT, AttributeType.LINETYPE)
       
       ],
       
       
       'LittleShape': [
   #   Rule(Ruletype.PROGRESSION, AttributeType.SHAPE),
           Rule(Ruletype.CONSTANT, AttributeType.COLOR),
       
           Rule(Ruletype.CONSTANT, AttributeType.POSITION),
           Rule(Ruletype.CONSTANT, AttributeType.SHAPE),
           Rule(Ruletype.ARITHMETIC, AttributeType.NUMBER, direction = 'subtraction'),
           Rule(Ruletype.FULL_CONSTANT, AttributeType.SIZE, value ='medium')]}

  

# Generate matrix

create_matrix(rules, alternatives=4, seed = None, alternative_seed =None , entity_types=['BigShape', 'LittleShape'], path = '/Users/njudd/Desktop/hmmmm')


#12345788912457

```


# Structure of matricies

#### 1) Entities
An object/shape with contanies attributes
- Big Shape, Little Shape, Line

#### 2) Attribute Types: 
Ways to change how matricies look. Classes of settings. This will depend on the Entity.

Big shape:
- Color, Shape, Size, Angle
Little Shape:
- Color, Shape, Size, Angle, Position
Line
- linetype, linenumber, Angle

#### 3) Options

Color:
Shape: 
Size:
Angle:
Position:
linetype: 
linenumber: 
Angle:

#### 4) Rules you specify for an attribute
One attribute has a rule.

Full constant: Whole matrix has the same options
Constant: Rowwise same options



# The attribute options

```{python}
#| output: true

#from render import COLOR_MAP
#print(COLOR_MAP)


from entity import Colors, Sizes
Colors._member_names_
Sizes._member_names_

```

## A super easy example 
Here we make a big shape with four alternatives

```{python}
rules = {
    'BigShape': [
        Rule(Ruletype.FULL_CONSTANT, AttributeType.SHAPE),
        Rule(Ruletype.FULL_CONSTANT, AttributeType.ANGLE),
        Rule(Ruletype.FULL_CONSTANT, AttributeType.COLOR),
        Rule(Ruletype.FULL_CONSTANT, AttributeType.SIZE)]}


create_matrix(rules, alternatives=4, seed = None, alternative_seed =None , entity_types=['BigShape'])
```

By default it outputs the matricies with alternativesl in a folder called "output". Yet, you can change this with the `path` arguement. Since we are not specifying a seed it will generate a different matrix (with different answer alternatives) each time.

![Full Constant Example](output/problem_matrix.png){width=300}

```{python}
# img.load('output')


img = cv2.imread("output/problem_matrix.png")

cv2.imshow("Displayed Image", img)
```

Now introduce how a problem seed makes the same problem with different alternativs

Now introduce alt see

And now we can contrain Bigshape to be a red medium sized sqaure.








```{python}

# rules = {'Line': [
#            Rule(Ruletype.CONSTANT, AttributeType.ANGLE, value = 'ONE_EIGHTY'),
#            Rule(Ruletype.ARITHMETIC, AttributeType.LINENUMBE),
#            Rule(Ruletype.CONSTANT, AttributeType.LINETYPE)]}


# create_matrix(rules, alternatives=4, seed = None, alternative_seed =None , entity_types=['Line'])

```
